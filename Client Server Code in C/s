#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <netdb.h>
#include <sys/types.h>
#include <netinet/in.h>
#include <sys/socket.h>

#define PORT 64576

#define BACKLOG 10


int main(int argc, char * argv[])
{
	int sockfd, new_fd, n;

	struct sockaddr_in my_addr;
	struct sockaddr_in their_addr;

	int sin_size;

	sockfd = socket(AF_INET, SOCK_STREAM, 0);

	if(sockfd == -1)
	{
		perror("socket\n");
		exit(1);
	}
	else
		printf("socket is OK :D\n");

	my_addr.sin_family = AF_INET;

	my_addr.sin_port = htons(PORT);

	my_addr.sin_addr.s_addr = INADDR_ANY;

	memset(&(my_addr.sin_zero), 0, 8);

	if (bind(sockfd, (struct sockaddr *)&my_addr, sizeof(struct sockaddr)) == -1)
	{
		perror(bind);
		exit(1);
	}
	else
		printf("bind is OK :D\n");

	if (listen(sockfd, BACKLOG) == -1)
	{
		perror("listen");
		exit(1);
	}
	else
		printf("listen is OK :D");

	sin_size = sizeof(struct sockaddr_in);

	new_fd = accept(sockfd, (struct sockaddr*)&their_addr, (socklen_t *)&sin_size);

	if (new_fd == -1)
	{
		perror("accept");
		exit(1);
	}
	else
		printf("accept is OK :D");

	char buf[1024];

	while ((n = recv(new_fd, buf, 1024, 0)) > 0)
	{
		printf("%s\n", buf);
	}

	close(new_fd);
	close(sockfd);
	return 0;
}








